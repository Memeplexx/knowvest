// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model Note {
  id          Int         @id @default(autoincrement())
  text        String
  userId      Int         @map("user_id")
  user        User        @relation(fields: [userId], references: [id])
  dateCreated DateTime    @map("date_created")
  dateUpdated DateTime    @default(now()) @updatedAt @map("date_updated")
  isArchived  Boolean     @default(false) @map("is_archived")
  flashCards  FlashCard[]

  @@map("note")
}

model Synonym {
  id            Int            @id @default(autoincrement())
  dateUpdated   DateTime       @default(now()) @updatedAt @map("date_updated")
  isArchived    Boolean        @default(false) @map("is_archived")
  tag           Tag[]
  synonymGroups SynonymGroup[]

  @@map("synonym")
}

model Tag {
  id          Int      @id @default(autoincrement())
  text        String   @unique
  synonymId   Int      @map("synonym_id")
  synonym     Synonym  @relation(fields: [synonymId], references: [id])
  userId      Int      @map("user_id")
  user        User     @relation(fields: [userId], references: [id])
  dateCreated DateTime @map("date_created")
  dateUpdated DateTime @default(now()) @updatedAt @map("date_updated")
  isArchived  Boolean  @default(false) @map("is_archived")

  @@map("tag")
}

model Group {
  id            Int            @id @default(autoincrement())
  name          String         @unique
  userId        Int            @map("user_id")
  user          User           @relation(fields: [userId], references: [id])
  dateUpdated   DateTime       @default(now()) @updatedAt @map("date_updated")
  isArchived    Boolean        @default(false) @map("is_archived")
  synonymGroups SynonymGroup[]

  @@map("group")
}

model SynonymGroup {
  id          Int      @id @default(autoincrement())
  groupId     Int      @map("group_id")
  group       Group    @relation(fields: [groupId], references: [id])
  synonymId   Int      @map("synonym_id")
  synonym     Synonym  @relation(fields: [synonymId], references: [id])
  dateUpdated DateTime @default(now()) @updatedAt @map("date_updated")
  isArchived  Boolean  @default(false) @map("is_archived")

  @@map("synonym_group")
}

model User {
  id          Int      @id @default(autoincrement())
  email       String   @unique
  name        String
  image       String?
  dateUpdated DateTime @default(now()) @updatedAt @map("date_updated")
  isArchived  Boolean  @default(false) @map("is_archived")
  Note        Note[]
  Tag         Tag[]
  Group       Group[]

  @@map("user")
}

model FlashCard {
  id               Int      @id @default(autoincrement())
  noteId           Int      @map("note_id")
  note             Note     @relation(fields: [noteId], references: [id])
  text             String
  nextQuestionDate DateTime @map("next_question_date")
  cleanRunCount    Int      @map("clean_run_count")
  dateUpdated      DateTime @default(now()) @updatedAt @map("date_updated")
  isArchived       Boolean  @default(false) @map("is_archived")

  @@map("flash_card")
}
